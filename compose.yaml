version: '3.9'

networks:
  keycloak-net:
  mongo-db-net:
  monitoring-net:

volumes:
  keycloak-datastore:
  mongo_data:

services:
  keycloak-db:
    image: postgres:10.10
    volumes:
      - keycloak-datastore:/var/lib/postresql/data
    networks:
      - keycloak-net
    ports:
      - "25432:5432"
    environment:
      POSTGRES_DB:       keycloak
      POSTGRES_USER:     keycloak
      POSTGRES_PASSWORD: password

  keycloak:
    image: quay.io/keycloak/keycloak:20.0.2
    depends_on:
      - keycloak-db
    networks:
      - keycloak-net
    ports:
      - "8180:8080"
      - "8686:8686"
    volumes:
      - ./docker/keycloak:/opt/jboss/keycloak/imports
    environment:
      KC_DB:   postgres
      KC_DB_URL_HOST:     keycloak-db
      KC_DB_URL_PORT:     5432
      KC_DB_USERNAME:     keycloak
      KC_DB_PASSWORD: password
      KEYCLOAK_ADMIN:     microservice_admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      #KC_HTTP_PORT: 8180
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      KC_LOG_GELF_LEVEL: INFO
      KC_LOG_LEVEL: INFO
      JAVA_OPTS: -Djava.net.preferIPv4Stack=true -agentlib:jdwp=transport=dt_socket,address=8686,server=y,suspend=n
    command: ["start-dev", "-Dkeycloak.import=/opt/jboss/keycloak/imports/realm-export.json"]
  mongodb:
    image: mongo:latest
    restart: always
    networks:
        - mongo-db-net
    ports:
        - "27017:27017"
    environment:
        MONGO_INITDB_ROOT_USERNAME: mongoadmin
        MONGO_INITDB_ROOT_PASSWORD: secret
    volumes:
      - ./docker/mongoentrypoint/:/docker-entrypoint-initdb.d
      - mongo_data:/data/db
    command: [--auth]
  mongo-express:
    image: mongo-express:latest
    restart: always
    networks:
        - mongo-db-net
    ports:
      - 8089:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: mongoadmin
      ME_CONFIG_MONGODB_ADMINPASSWORD: secret
      ME_CONFIG_MONGODB_URL: mongodb://mongoadmin:secret@mongodb:27017/
  tempo:
    image: grafana/tempo
    extra_hosts: ['host.docker.internal:host-gateway']
    command: [ "-config.file=/etc/tempo.yaml" ]
    networks: 
        - monitoring-net
    volumes:
        - ./docker/tempo/tempo-local.yaml:/etc/tempo.yaml:ro
        - ./tempo-data:/tmp/tempo
    ports:
        - "14268"  # jaeger ingest
        - "9411:9411" # zipkin
  loki:
    image: grafana/loki
    extra_hosts: ['host.docker.internal:host-gateway']
    networks: 
        - monitoring-net
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
        - "3100:3100"                                   # loki needs to be exposed so it receives logs
    environment:
        - JAEGER_AGENT_HOST=tempo
        - JAEGER_ENDPOINT=http://tempo:14268/api/traces # send traces to Tempo
        - JAEGER_SAMPLER_TYPE=const
        - JAEGER_SAMPLER_PARAM=1
  prometheus:
    image: prom/prometheus
    extra_hosts: ['host.docker.internal:host-gateway']
    networks: 
        - monitoring-net
    command:
        - --enable-feature=exemplar-storage
        - --config.file=/etc/prometheus/prometheus.yml
    volumes:
        - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
        - "9090:9090"
  grafana:
    image: grafana/grafana
    extra_hosts: ['host.docker.internal:host-gateway']
    networks: 
        - monitoring-net
    volumes:
        - ./docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
        - ./docker/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
    environment:
        - GF_AUTH_ANONYMOUS_ENABLED=true
        - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
        - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
        - "3000:3000"
